---
interface Props {
  threshold?: number;
  rootMargin?: string;
}

const { threshold = 0.1, rootMargin = "50px" } = Astro.props;
---

<div class="lazy-section" data-threshold={threshold} data-root-margin={rootMargin}>
  <slot />
</div>

<script>
  class LazySection {
    constructor() {
      this.sections = document.querySelectorAll('.lazy-section');
      this.init();
    }

    init() {
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              entry.target.classList.add('loaded');
              observer.unobserve(entry.target);
            }
          });
        },
        {
          threshold: parseFloat(entry.target.dataset.threshold) || 0.1,
          rootMargin: entry.target.dataset.rootMargin || "50px"
        }
      );

      this.sections.forEach(section => observer.observe(section));
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new LazySection());
  } else {
    new LazySection();
  }
</script>

<style>
  .lazy-section {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease-out, transform 0.6s ease-out;
  }

  .lazy-section.loaded {
    opacity: 1;
    transform: translateY(0);
  }
</style>
